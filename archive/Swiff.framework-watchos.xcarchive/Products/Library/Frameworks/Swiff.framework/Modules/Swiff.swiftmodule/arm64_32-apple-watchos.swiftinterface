// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64_32-apple-watchos8.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Swiff
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
@_exported import Swiff
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@propertyWrapper public struct Inject<T> {
  public var wrappedValue: T
  public init(_ named: Swift.String? = nil)
}
@propertyWrapper public struct InjectState<T> : SwiftUI.DynamicProperty {
  public var wrappedValue: T {
    get
    nonmutating set
  }
  public var projectedValue: SwiftUI.Binding<T> {
    get
  }
  public init(_ named: Swift.String? = nil)
}
@available(iOS, deprecated: 17.0, message: "use InjectState with tag @Observable")
@propertyWrapper @_Concurrency.MainActor(unsafe) public struct InjectStateObject<T> : SwiftUI.DynamicProperty where T : Combine.ObservableObject {
  @_Concurrency.MainActor(unsafe) public var wrappedValue: T {
    get
    nonmutating set
  }
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.Binding<T> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(_ named: Swift.String? = nil)
}
@available(iOS, deprecated: 17.0, message: "use InjectState with tag @Observable")
@propertyWrapper @_Concurrency.MainActor(unsafe) public struct InjectObservedObject<T> : SwiftUI.DynamicProperty where T : Combine.ObservableObject {
  @_Concurrency.MainActor(unsafe) public var wrappedValue: T {
    get
    nonmutating set
  }
  @_Concurrency.MainActor(unsafe) public var projectedValue: SwiftUI.Binding<T> {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(_ named: Swift.String? = nil)
}
public typealias ModuleDeclaration = (Swiff.Container) -> Swift.Void
public struct Container {
  public func single<T>(to register: T.Type, implement: (any Swift.AnyObject.Type)? = nil, named: Swift.String? = nil) where T : Swiff.Injectable
  public func factory<T>(to register: T.Type, implement: (any Any.Type)? = nil, named: Swift.String? = nil) where T : Swiff.Injectable
}
public func module(_ container: @escaping Swiff.ModuleDeclaration) -> Swiff.ModuleDeclaration
public func startSwiff(_ modules: Swiff.ModuleDeclaration...)
public protocol Injectable {
  init()
}
